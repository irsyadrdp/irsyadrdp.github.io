{"meta":{"title":"@irsyadrdp's blog","subtitle":"ayo belajar hal baru","description":null,"author":"Irsyad Riandri Dana Prawira","url":"http://irsyadrdp.github.io"},"pages":[],"posts":[{"title":"Go-lang","slug":"golang-baru","date":"2018-03-27T11:55:44.398Z","updated":"2018-03-27T13:35:09.139Z","comments":true,"path":"2018/03/27/golang-baru/","link":"","permalink":"http://irsyadrdp.github.io/2018/03/27/golang-baru/","excerpt":"Go atau biasa disebut GoLang (Go Language) merupakan salah satu bahasa pemrograman yang dikembangkan oleh Google dan sangat mudah dipakai untuk membuat aplikasi yang simple, reliable &amp; efficient. Bahasa ini dibuat oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007. Bahasa ini dikembangkan selama kurang lebih 2 tahun, dan mulai dirilis pada tahun 2009.","text":"Go atau biasa disebut GoLang (Go Language) merupakan salah satu bahasa pemrograman yang dikembangkan oleh Google dan sangat mudah dipakai untuk membuat aplikasi yang simple, reliable &amp; efficient. Bahasa ini dibuat oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007. Bahasa ini dikembangkan selama kurang lebih 2 tahun, dan mulai dirilis pada tahun 2009. Bahasa Go diciptakan untuk membuat suatu bahasa pemrograman yang mendukud type safety dan portability. Selain itu bahasa ini pun memiliki beberapa keuntungan. 1. Keuntungan Bahasa Go Compiled LanguageCompiled language dikenal dengan kecepatannya, karena akan dikonversi langsung kedalam level mesin. Go CompilerGo memiliki compiler sendiri yang dapat melakukan pengecekkan error , kemudahan deployment dan kemampuan untuk mengoptimasi kode. Error CheckingApabila terdapat suatu variabel yang tidak digunakkan, packages yang hilang, atau typo, maka Go Compiler akan secara otomatis mendeteksinya sebagai error, sehingga kode yang kita buat akan lebih efisien. Cross CompilingBahasa Go mendukung cross-compile sehingga aplikasi yang kita buat dapat berjalan di mesin yang berbeda. Go Compiler bisa memungkinkan user untuk membuat executable binaries untuk sistem operasi yang berbeda. Garbage CollectionBahasa Go mendukung menajemen memori secara otomatis, sehingga dapat memberikan akses penuh dalam pengaturan memory allocation, sehingga dapat memperkecil latency hingga 1ms. ScalabilityKarena Go dikembangkan oleh Google, maka bahasa ini di desain untuk mendukung skalabilitas. Go memiliki built-in features untuk menangani concurency, melalui fungsi Goroutines dan Channel. Fungsi ini mampu menjalankan beberapa fungsi secara bersamaan. Sedangkan Channel memungkinkan adanya komunikasi antar sesama untuk mencari tahu cara terbaik dalam menyelesaikan suatu pekerjaan. SimplicityGo dibuat untuk mendukung kesederhanaan dan kemudahan untuk dipahami, baik dalam pembacaan maupun penulisan kode. 2. Contoh SyntaxBahasa Go tidak mengharuskan penggunaan titik koma (;) di setiap akhir baris kode. Berikut ini beberapa syntax dalam penulisan kode bahasa Go. Deklarasi variabelDalam melakukan deklarasi variabel di bahasa Go, terdapat beberapa cara. 1. Deklarasi dengan diikuti tipe variabel 1var kata string = &quot;Halo&quot; 2. Deklarasi tanpa tipe variabel 1kata := &quot;Halo&quot; Dalam bahasa Go tidak memiliki properti Public/Private. Yang membedakan Public/Private di bahasa Go adalah awal kata dari nama variabel atau function dalam bahasa Go. Jika huruf awal huruf merupakan huruf besar, maka otomatis akan menjadi Public. Namun jika awal huruf merupakan huruf kecil, maka otomatis akan menjadi Private. Hello WorldDalam membuat contoh kodingan “Hello World” dalam bahasa Go, bisa menggunakan kode di bawah ini. 1234567package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello World&quot;)&#125; Penggunaan FunctionDalam bahasa Go tidak mengenal fitur class, overloading maupun inheritance. Namun bahasa ini merupakan bahasa pemrograman procedural, sehingga banyak menggunakan function. Berikut contoh penggunaan function di Go. file: main.go12345678910package mainimport &quot;fmt&quot;import &quot;github.com/hello-world/helper&quot;func main() &#123; //calculate helper function penjumlahan, perkalian := helper.Calculate2(3, 4) fmt.Println(a, b)&#125; file dalam folder: github.com/hello-world/helper/calculate.go12345func Calculate1(a, b int) (int, int) &#123; sum := a + b prod := a * b return sum, prod&#125; Contoh Rest API di GoBerikut ini contoh rest API di bahasa Go 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273package mainimport ( &quot;encoding/json&quot; &quot;github.com/gorilla/mux&quot; &quot;log&quot; &quot;net/http&quot;)type Person struct &#123; ID string `json:&quot;id, omitempty&quot;` Firstname string `json:&quot;firstname, omitempty&quot;` Lastname string `json:&quot;lastname, omitempty&quot;` Address *Address `json:&quot;address, omitempty&quot;`&#125;type Address struct &#123; City string `json:&quot;city, omitempty&quot;` State string `json:&quot;state, omitempty&quot;`&#125;var people []Personfunc GetPeople(w http.ResponseWriter, r *http.Request) &#123; json.NewEncoder(w).Encode(people) //get data&#125;func GetPerson(w http.ResponseWriter, r *http.Request) &#123; params := mux.Vars(r) for _, item := range people &#123; if item.ID == params[&quot;id&quot;] &#123; json.NewEncoder(w).Encode(item) return &#125; &#125; json.NewEncoder(w).Encode(&amp;Person&#123;&#125;)&#125;func CreatePerson(w http.ResponseWriter, r *http.Request) &#123; params := mux.Vars(r) var person Person _ = json.NewDecoder(r.Body).Decode(&amp;person) person.ID = params[&quot;id&quot;] people = append(people, person) json.NewEncoder(w).Encode(people)&#125;func DeletePerson(w http.ResponseWriter, r *http.Request) &#123; params := mux.Vars(r) for index, item := range people &#123; if item.ID == params[&quot;id&quot;] &#123; people = append(people[:index], people[index+1]) break &#125; json.NewEncoder(w).Encode(people) &#125;&#125;func main() &#123; router := mux.NewRouter() people = append(people, Person&#123;ID: &quot;1&quot;, Firstname: &quot;John&quot;, Lastname: &quot;Doe&quot;, Address: &amp;Address&#123;City: &quot;City X&quot;, State: &quot;State X&quot;&#125;&#125;) people = append(people, Person&#123;ID: &quot;2&quot;, Firstname: &quot;Koko&quot;, Lastname: &quot;Doe&quot;, Address: &amp;Address&#123;City: &quot;City Z&quot;, State: &quot;State Y&quot;&#125;&#125;) people = append(people, Person&#123;ID: &quot;3&quot;, Firstname: &quot;Francis&quot;, Lastname: &quot;Sunday&quot;&#125;) router.HandleFunc(&quot;/people&quot;, GetPeople).Methods(&quot;GET&quot;) router.HandleFunc(&quot;/people/&#123;id&#125;&quot;, GetPerson).Methods(&quot;GET&quot;) router.HandleFunc(&quot;/create/&#123;id&#125;&quot;, CreatePerson).Methods(&quot;POST&quot;) router.HandleFunc(&quot;/delete/&#123;id&#125;&quot;, DeletePerson).Methods(&quot;DELETE&quot;) log.Fatal(http.ListenAndServe(&quot;:8000&quot;, router))&#125; Contoh Penerapan Test Driven Development di GoBerikut ini contoh TDD di bahasa Go file: main.go1234567891011121314151617181920212223242526272829package mainimport &quot;fmt&quot;func main() &#123; a := Add(2, 3) fmt.Println(a) arr := []int&#123;1,2,3,4&#125; b := AddMultiple(arr) fmt.Println(b)&#125;func Add(a, b int) int &#123; return a + b&#125;func AddMultiple(n []int) int &#123; if len(n) == 0&#123; return 0 &#125; sum := 0 for _, item := range n &#123; sum+=item &#125; return sum&#125; file: main_test.go12345678910111213141516171819202122232425262728293031323334353637383940414243444546//run package test | run file testpackage mainimport &quot;testing&quot;//run test | debug testfunc TestAddInit(t *testing.T) &#123; t.Log(&quot;Success&quot;)&#125;func TestAddTwoNumbers(t *testing.T) &#123; result := Add(2, 3) if result != 5 &#123; t.Error(&quot;Failed to add two numbers&quot;) &#125;else&#123; t.Log(&quot;Success&quot;) &#125;&#125;func TestAddMultipleNumbers(t *testing.T) &#123; arr := []int&#123;1,2,3,4&#125; result := AddMultiple(arr) if result != 10 &#123; t.Error(&quot;Failed to add two numbers&quot;) &#125;else&#123; t.Log(&quot;Success&quot;) &#125;&#125;func TestAddNullParameter(t *testing.T)&#123; result := AddMultiple([]int&#123;&#125;) if result != 0&#123; t.Error(&quot;Failed&quot;) &#125;else&#123; t.Log(&quot;Success&quot;) &#125;&#125;/*go test --covergo test -coverprofile=coverage.out go tool cover -html=coverage.out*/``Cara untuk melakukan eksekusi TDD di Go go test –covergo test -coverprofile=coverage.outgo tool cover -html=coverage.out","categories":[{"name":"programming","slug":"programming","permalink":"http://irsyadrdp.github.io/categories/programming/"}],"tags":[{"name":"go","slug":"go","permalink":"http://irsyadrdp.github.io/tags/go/"},{"name":"golang","slug":"golang","permalink":"http://irsyadrdp.github.io/tags/golang/"}]},{"title":"Apakah saya sudah cukup baik untuk dikatakan sebagai Developer?","slug":"ragu","date":"2018-03-25T07:12:27.406Z","updated":"2018-03-27T12:30:56.854Z","comments":true,"path":"2018/03/25/ragu/","link":"","permalink":"http://irsyadrdp.github.io/2018/03/25/ragu/","excerpt":"Sebagai Developer, menyadari akan hadirnya fenomena perkembangan dunia digital yang sangat pesat di berbagai belahan dunia, menjadi hal yang sebaiknya diperhatikan. Pasalnya, dari munculnya kejadian tersebut, telah melahirkan banyak sekali Developer yang sangat handal di era ini. Pencapaian yang mereka raih, Aplikasi yang mereka ciptakan, Pengalaman yang mereka dapatkan, seakan-akan membuat kita sebagai developer merasa “tidak bisa apa-apa“.","text":"Sebagai Developer, menyadari akan hadirnya fenomena perkembangan dunia digital yang sangat pesat di berbagai belahan dunia, menjadi hal yang sebaiknya diperhatikan. Pasalnya, dari munculnya kejadian tersebut, telah melahirkan banyak sekali Developer yang sangat handal di era ini. Pencapaian yang mereka raih, Aplikasi yang mereka ciptakan, Pengalaman yang mereka dapatkan, seakan-akan membuat kita sebagai developer merasa “tidak bisa apa-apa“. Kita melihat mereka sebagai Developer yang memiliki segalanya, memiliki “kodingan” yang lebih rapi dari milik kita, dapat melakukan debugging lebih cepat dari kita, mereka tinggal melihat dokumentasi untuk mempelajari hal baru dan dengan sekejap langsung menguasai hal tersebut, mereka percaya diri dan sangat “enjoy ngoding“. Lalu bagaimana dengan kita? Kita merasa khawatir. khawatir bahwa kita tidak cukup mengerti mengenai framework dan bahasa pemrograman yang dipakai khawatir menjelaskan bugs khawatir tidak bisa mengikuti perkembangan teknologi terbaru khawatir bahwa kita tidak cukup bertalenta khawatir banyak hal yang tidak bsia dimengerti dengan mudah Sehingga akhirnya kita berpikir: “Mungkin saya memang tidak ditakdirkan untuk menjadi seorang developer.“ Jika kita berpikir demikian, maka kau tidak sendirian. Ada lebih dari 2 juta hasil jika engkau mencari di Google mengenai “self-doubt developers”.Lalu bagaimana cara untuk menghilangkan pikiran ragu pada diri sendiri? 1. Belajar pemrograman sama persis seperti membangun ototUntuk belajar bermain bola, kita harus pergi ke lapangan. Untuk membentuk otot yang kuat, kita harus pergi ke gym. Untuk belajar programming, kita harus duduk dan “ngoding”.Setelah kita bermain bola maupun berlatih di gym, tentunya kita akan merasakan sakit dan lelah. Ini sama halnya seperti belajar pemrograman. Kita akan menemui “stuck” suatu saat nanti dan tentunya otak pun akan terasa sakit sehingga kita akan merasa frustasi. Tetapi layaknya berlatih, kita jangan sampai mudah menyerah hanya karena hal tersebut, karena ini merupakan tahapan dari sebuah proses. Kebuntuan adalah bagian dari proses“Stuck” dalam pemrograman merupakan hal yang normal. Bahkan hal ini pun terjadi pada developer senior. Bagian besar dari pemrograman adalah mencari tahu mengapa hal yang kita harapkan tidak terjadi? Karena semuanya tidaklah berjalan secara instan. Semua kode saat pertama kali dibuat tidaklah terlepas dari adanya “bugs”. Jika kita mengalami “stuck” untuk waktu yang lama, bertahanlah dan mulailah mencari apa yang salah secara bertahap dan perlahan. Cari di Google, tanya teman, “cari udara segar”, dan kamu pasti akan menemukan solusinya. Ketika kita secara terus menerus mendapatkan pengalaman mengenai hal ini, maka secara bertahap pula kita terhindar dari “stuck” saat “ngoding”. Saat suatu waktu nanti kita mendapatkan “stuck”, janganlah paksa dirimu. Ingatlah bahwa ini bukanlah kesalahanmu, melainkan ini adalah hal normal yang merupakan bagian dari suatu proses. Kita bingung mengenai anggapan “pintar dari lahir” dengan “terlihat pintar karena dia meluangkan banyak sekali waktu belajar mengenai hal tersebut”Tak ada sesuatu yang datang secara instan. Seorang peneliti maupun developer handal pasti melalui yang namanya proses belajar. Seorang yang dapat mengerti maupun mengerjakan sesuatu dengan mudahnya, pasti telah terlebih dahulu melalui proses belajar yang menguras otak dan susah payah memahami hal tersebut. Ketika suatu waktu kita mendapati diri merasa sulit dalam mempelajari sesuatu, sedangkan orang-orang disekitarmu dengan mudahnya menguasai hal tersebut, janganlah berpikir bahwa kau tidak cukup bertalenta dalam hal tersebut. Namun hal itu karena mereka lebih dahulu belajar atau lebih banyak bersusah payah dari dirimu dalam memahami hal tersebut. Dalam otak mereka telah terbentuk “otot yang kuat” untuk menangani hal tersebut. Setelah kau melalui perjuangan dirimu sendiri, maka barulah kau akan terlihat pintar dan menguasai hal tersebut dengan mudah. Ini adalah tentang “reps and set”Jika kita menekuni sesuatu dan berlatih secara terus-menerus, percayalah bahwa kita pasti bisa menguasainya. Kita membangun otot tentunya melalui latihan. Begitu pun dalam belajar pemrograman, pasti melalui proses yang sama. Semakin banyak kita meluangkan waktu untuk “ngoding”, maka kita akan menjadi developer yang handal. 2. Fokus terhadap karyamu, bukan dirimuBerhentilah berpikir seberapa baik atau buruknya dirimu sebagai programmer. Jika kau memiliki skill dibawah rata-rata dari tim-mu, pasti kau ingin bisa menjadi lebih baik. Jika kau memiliki skill diatas rata-rata dari tim-mu, kau pun pastinya masih ingin menjadi lebih baik. Tidak peduli seberapa baik atau buruknya dirimu, selalu ada orang lain di depanmu dan di belakangmu. Jadi berhentilah buang-buang waktu memikirkan hal tersebut. Namun, fokuslah terhadap karya yang sedang kau ukir. Berhentilah berpikir seberapa baik dirimu. Namun bertanyalah seberapa baik kodinganmu? Bagaimana kau bisa membuatnya lebih baik, lebih cepat, lebih mudah dimengerti? Kelilingilah dirimu dengan para engineers yang kau kagumi. Bacalah kodingan mereka. Seberapa berbedakah dengan kodingan milikmu? Satu-satunya cara untuk tetap hidup percaya diri sebagai developer adalah dengan fokus terhadap karyamu, dan teruslah kembangkan menjadi lebih baik secara terus-menerus. ####Poin aksi : Mulailah dari kemenangan kecil Ingatlah kapan terakhir kali kau menemui “stuck” dan tidak yakin apakah kau bisa menyelesaikannya? Dan ingatlah bagaimana kau menyelesaikannya? Bukalah notes, dan tuliskanlah solusimu. Jika suatu waktu kan merasa ragu akan dirimu, bukalah kembali catatanmu tersebut, dan ingatkanlah dirimu. Jika kita dapat menyelesaikan masalah terakhir yang kau hadapi, maka tentunya kau juga akan bisa menyelesaikan masalah yang sedang kau hadapi sekarang ini. Selalu rayakan kemenangan ini!","categories":[{"name":"developer","slug":"developer","permalink":"http://irsyadrdp.github.io/categories/developer/"}],"tags":[{"name":"developer","slug":"developer","permalink":"http://irsyadrdp.github.io/tags/developer/"}]},{"title":"Top Trends in Web Dev 2018","slug":"WebDev-2018","date":"2018-03-12T01:57:01.580Z","updated":"2018-03-12T02:44:15.225Z","comments":true,"path":"2018/03/12/WebDev-2018/","link":"","permalink":"http://irsyadrdp.github.io/2018/03/12/WebDev-2018/","excerpt":"","text":"Sumber: youtube Artikel ini merupakan ulasan dari youtube video mengenai 8 tren Web Development di tahun 2018 1. Kenali Dasar Tidak bisa seseorang dikatakan sebagai Developer jika tidak mengetahui dasarnya Javascript menguasai “semuanya” Namun, jangan hanya melakukan coding Javascript saja 2. Pahami Node.js Menggunakan bahasa FrontEnd #1 pada Backend-nya Mudah untuk dipelajari Digunakan di banyak platform Serverless maupun servis AI 3. Framework Frontend Menciptakan Web Apps yang menarik, handal dan interaktif Mengelola User Interface secara manual sangat tidak baik Banyak teknik yang dapat digunakan untuk memperbaiki Kecepatan dan UX 4. Web Components / Compiler Web Components didukung di hampir seluruh browser Menyimpan overhead Javascript dan menciptakan UI yang menarik Dapat digunakan dengan berbagai macam Framework populer 5. Generate Page Secara Statis Mengabaikan permasalahan setup server-side untuk konten statis SEO yang sangat baik Dikombinasi dengan SPAs 6. Bangun Websitemu sebagai Progressive Web App Menggunakan teknologi website yang memberikan pengalaman penggunaan aplikasi mobile Mendukung Web Pages, Push, Background Sync secara offline Dukungan browser semakin membaik 7. Berhenti Khawatir mengenai Server Skalabilitas tak terbatas serta tidak memerlukan setup yang rumit Bayar sesuai yang digunakan, bukan sesuai estimasi DevOps dan Ekosistem berkembang dengan sangat cepat 8. Bangun Websitemu lebih Pintar dengan AI dan Bots Kecerdasan Buatan (AI) semakin mudah untuk digabungkan Kendali keputusan Bots dan AI dapat mengembangkan hampir semua model bisnis Jumlah layanan + pembiayaan yang tersedia semakin berkembang 9. Lainnya…Apalagi hal yang harus dipelajari Testing Unit Test End-To-End Test Tooling Webpack Babel,… Optimisasi Best Practice Kode Optimisasi Gambar 10. Lalu bagaimana dengan? PHP Laravel Ruby Bootstrap Angular Ember, dll… Mereka semua tidak mati.Hanya saja bukan trend menarik saat ini","categories":[],"tags":[]},{"title":"git - Panduan Sederhana","slug":"git-panduan","date":"2018-03-08T21:07:15.937Z","updated":"2018-03-25T14:16:38.177Z","comments":true,"path":"2018/03/09/git-panduan/","link":"","permalink":"http://irsyadrdp.github.io/2018/03/09/git-panduan/","excerpt":"","text":"Artikel ini merupakan ulasan dan sebagian terjemahan berbahasa Indonesia dari git - the simple guide, yang akan menjelaskan secara sederhana mengenai panduan awal dalam menggunakan git. 1. InstalasiDownload git terlebih dahulu melalui link dibawah ini sesuai dengan sistem operasi yang digunakan. Download git untuk OSX Download git untuk Windows Download git untuk Linux 2. Buat Repository Git BaruBuatlah folder baru di harddrive lokal. Lalu bukalah terminal atau comand prompt dan masuk ke dalam folder lokal yang telah dibuat. Lalu ketikan command berikut: 1git init 3. Melakukan Checkout RepositoryBuatlah salinan folder repository lokal dengan mengetikkan command berikut:1git clone /path/repository/lokal Jika dilakukan melalui remote server, maka ketikkan command berikut:1git clone username@host:/path/repository/remote 4. Workflow Repository lokal yang telah dibuat, mengandung 3 “trees“ yang dikelola oleh git. Working Directory , untuk menyimpan actual files Index , untuk menyimpan file dalam status staging HEAD , untuk menyimpan file terakhir yang telah dilakukan commit 5. Add &amp; CommitJika melakukan perubahan pada file, kita bisa memasukkan file tersebut ke dalam Index dengan mengetikkan command berikut: 1git add namafile atau jika ingin memasukkan semua file yang dirubah sekaligus, dapat mengetikkan command berikut:1git add * Setelah itu lakukan commit dengan mengetikkan command berikut:1git commit -m &quot;pesan yang ingin dicurahkan dari perubahan file&quot; Maka, semua file yang telah dilakukan commit akan masuk ke dalam HEAD 6. Push PerubahanSetelah file yang dirubah masuk ke dalam HEAD, maka kita harus melakukan push ke remote repository dengan mengetikkan command berikut:1git push origin master Kita dapat merubah “master“ dengan “branch“ yang dimiliki. Jika kita belum melakukan clone repository yang telah ada sebelumnya, dan kita ingin melakukan koneksi terhadap remote server, maka ketikkan command berikut:1git remote add origin &lt;server&gt; Setelah itu kita dapat melakukan push terhadap remote server. 7. BranchingBranch digunakan untuk mengembangkan fitur lain secara terisolasi dengan yang lainnya. Sedangkan master branch merupakan “default branch“ ketika kita pertama kali membuat repository. Gunakanlah branch untuk proses pengembangan, lalu lakukan “merge“ untuk menggabungkannya kembali dengan master ketika sudah selesai. Sebagai contoh, buatlah branch dengan nama “fitur_x”, dan beralih ke dalam fitur tersebut:1git checkout -b fitur_x lalu kembali ke master:1git checkout master dan hapus kembali branch yang telah dibuat:1git branch -d fitur_x Sebuah branch tidak tersedia untuk yang lain kecuali kita melakukan push branch ke dalam remote repository dengan mengetikkan command berikut:1git push origin &lt;branch&gt; 8. Update &amp; MergeUntuk melakukan update terhadap repository lokal dari commit terbaru di remote repository, ketikkan command berikut:1git pull Untuk melakukan merge branch lain dengan active branch (seperti master), ketikkan command berikut:1git merge nama_branch Dalam beberapa kasus git akan mencoba untuk melakukan merge otomatis terhadap perubahan yang ada, namun hal ini dapat berakhir dengan munculnya conflict. Oleh karena itu, kita harus melakukan merge secara manual terhadap conflict yang muncul dengan melakukan edit pada file yang ditunjukkan oleh git. Setelah perubahan dilakukan, maka kita harus menandai file-file tersebut dengan merged melalui command berikut:12git diff &lt;sumber_branch&gt; &lt;target_branch&gt;git add nama_file 9. TaggingPembuatan tag dianjurkan terhadap aplikasi yang akan dirilis. Untuk melakukan hal ini, kita dapat mengetikkan command berikut:1git tag 1.0.0 1b2e1d63ff “1b2e1d63ff” merupakan 10 karakter pertama dari kode atau id saat melakukan commit. Untuk melihat kode atau id tersebut, kita dapat melakukannya melalui “log“. 10. LogUntuk melihat riwayat repository , kita dapat mengetikkan command berikut:1git log Untuk melihat riwayat hanya dari author tertentu, kita dapat mengetikkan command berikut:1git log --author=nama_author Untuk melihat hasil riwayat yang dikompres menjadi 1 baris untuk setiap commit, kita dapat mengetikkan command berikut:1git log --pretty=oneline Atau jika kita ingin melihat ASCII tree dari semua branch , kita dapat mengetikkan command berikut:1git log --graph --oneline --decorate --all Jika ingin hanya melihat file yang telah dirubah, kita dapat mengetikkan command berikut:1git log --name-status Untuk mengetahui lebih banyak mengenai log command , kita dapat mengetikkan command berikut:1git log --help 11. Replace Perubahan pada Folder LokalJika dalam suatu kasus kita melakukan kesalahan, maka ktia dapat melakukan replace terhadap file-file lokal dengan file terkakhir yang ada di dalam HEAD melalui command berikut:1git checkout -- namafile Namun file yang telah dirubah tadi akan tetap disimpan dalam Index sebagai file baru. Jika kita ingin menghapus semua file lokal yang telah dirubah dan dilakukan commit, maka ambil riwayat terakhir dari server dan tujukan master branch lokal ke riwayat tersebut, melalui command berikut: git fetch origin git reset --hard origin/master 12. Hints gitk - git GUI git config color.ui true - ouput git dengan fitur warna git config format.pretty oneline - tampilkan log dengan hanya 1 baris keluaran untuk setiap commit git add -i - interactive adding 13. Link &amp; Referensi Graphical Clients GitX (L) (OSX, open source) Tower (OSX) Source Tree (OSX &amp; Windows, free) GitHub untuk Mac (OSX, free) GitBox (OSX, App Store) Petunjuk Git Community Book Pro Git Berpikir seperti git Bantuan GitHub Petunjuk Visual Git Bantuan Git User Mailing List #git on irc.freenode.net","categories":[],"tags":[]},{"title":"Hello World","slug":"blog-pertama","date":"2018-03-08T07:52:57.669Z","updated":"2018-03-08T07:52:57.670Z","comments":true,"path":"2018/03/08/blog-pertama/","link":"","permalink":"http://irsyadrdp.github.io/2018/03/08/blog-pertama/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}